// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct file {
    static var cartfile: NSURL? { return NSBundle.mainBundle().URLForResource("Cartfile", withExtension: "") }
    static var lookupPng: NSURL? { return NSBundle.mainBundle().URLForResource("lookup", withExtension: "png") }
    static var lookup_amatorkaPng: NSURL? { return NSBundle.mainBundle().URLForResource("lookup_amatorka", withExtension: "png") }
    static var lookup_miss_etikatePng: NSURL? { return NSBundle.mainBundle().URLForResource("lookup_miss_etikate", withExtension: "png") }
    static var lookup_soft_elegance_1Png: NSURL? { return NSBundle.mainBundle().URLForResource("lookup_soft_elegance_1", withExtension: "png") }
    static var lookup_soft_elegance_2Png: NSURL? { return NSBundle.mainBundle().URLForResource("lookup_soft_elegance_2", withExtension: "png") }
    static var texgyreadventorBoldOtf: NSURL? { return NSBundle.mainBundle().URLForResource("texgyreadventor-bold", withExtension: "otf") }
    static var texgyreadventorBolditalicOtf: NSURL? { return NSBundle.mainBundle().URLForResource("texgyreadventor-bolditalic", withExtension: "otf") }
    static var texgyreadventorItalicOtf: NSURL? { return NSBundle.mainBundle().URLForResource("texgyreadventor-italic", withExtension: "otf") }
    static var texgyreadventorRegularOtf: NSURL? { return NSBundle.mainBundle().URLForResource("texgyreadventor-regular", withExtension: "otf") }
  }
  
  struct font {
    static func teXGyreAdventorBold(size size: CGFloat) -> UIFont? {
      return UIFont(name: "TeXGyreAdventor-Bold", size: size)
    }
    
    static func teXGyreAdventorBolditalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "TeXGyreAdventor-BoldItalic", size: size)
    }
    
    static func teXGyreAdventorItalic(size size: CGFloat) -> UIFont? {
      return UIFont(name: "TeXGyreAdventor-Italic", size: size)
    }
    
    static func teXGyreAdventorRegular(size size: CGFloat) -> UIFont? {
      return UIFont(name: "TeXGyreAdventor-Regular", size: size)
    }
  }
  
  struct image {
    static var action: UIImage? { return UIImage(named: "action") }
    static var album: UIImage? { return UIImage(named: "album") }
    static var bar: UIImage? { return UIImage(named: "bar") }
    static var check: UIImage? { return UIImage(named: "check") }
    static var chevron_left: UIImage? { return UIImage(named: "chevron_left") }
    static var close: UIImage? { return UIImage(named: "close") }
    static var filter: UIImage? { return UIImage(named: "filter") }
    static var lookup: UIImage? { return UIImage(named: "lookup") }
    static var lookup_amatorka: UIImage? { return UIImage(named: "lookup_amatorka") }
    static var lookup_miss_etikate: UIImage? { return UIImage(named: "lookup_miss_etikate") }
    static var lookup_soft_elegance_1: UIImage? { return UIImage(named: "lookup_soft_elegance_1") }
    static var lookup_soft_elegance_2: UIImage? { return UIImage(named: "lookup_soft_elegance_2") }
    static var maximum_track: UIImage? { return UIImage(named: "maximum_track") }
    static var minimum_track: UIImage? { return UIImage(named: "minimum_track") }
    static var music: UIImage? { return UIImage(named: "music") }
    static var pause: UIImage? { return UIImage(named: "pause") }
    static var play: UIImage? { return UIImage(named: "play") }
    static var recOff: UIImage? { return UIImage(named: "rec-off") }
    static var recOn: UIImage? { return UIImage(named: "rec-on") }
    static var settings: UIImage? { return UIImage(named: "settings") }
    static var thumb_track: UIImage? { return UIImage(named: "thumb_track") }
    static var tv: UIImage? { return UIImage(named: "tv") }
    static var videocam: UIImage? { return UIImage(named: "videocam") }
  }
  
  struct nib {
    static var launchScreen: _R.nib._LaunchScreen { return _R.nib._LaunchScreen() }
  }
  
  struct reuseIdentifier {
    static var songTableViewCell: ReuseIdentifier<Dubbidson.SongTableViewCell> { return ReuseIdentifier(identifier: "SongTableViewCell") }
    static var suggestionTableViewCell: ReuseIdentifier<Dubbidson.SuggestionTableViewCell> { return ReuseIdentifier(identifier: "SuggestionTableViewCell") }
    static var videoTableViewCell: ReuseIdentifier<Dubbidson.VideoTableViewCell> { return ReuseIdentifier(identifier: "VideoTableViewCell") }
  }
  
  struct segue {
    static var selectFilter: String { return "selectFilter" }
    static var selectSong: String { return "selectSong" }
    static var watchVideo: String { return "watchVideo" }
  }
  
  struct storyboard {
    struct main {
      static var initialViewController: UITabBarController? { return instance.instantiateInitialViewController() as? UITabBarController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: nil) }
      static var suggestionsViewController: Dubbidson.SuggestionsViewController? { return instance.instantiateViewControllerWithIdentifier("SuggestionsViewController") as? Dubbidson.SuggestionsViewController }
      
      static func validateImages() {
        assert(UIImage(named: "action") != nil, "[R.swift] Image named 'action' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "chevron_left") != nil, "[R.swift] Image named 'chevron_left' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "pause") != nil, "[R.swift] Image named 'pause' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "rec-off") != nil, "[R.swift] Image named 'rec-off' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "tv") != nil, "[R.swift] Image named 'tv' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "close") != nil, "[R.swift] Image named 'close' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "filter") != nil, "[R.swift] Image named 'filter' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "play") != nil, "[R.swift] Image named 'play' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "videocam") != nil, "[R.swift] Image named 'videocam' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "music") != nil, "[R.swift] Image named 'music' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "check") != nil, "[R.swift] Image named 'check' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "settings") != nil, "[R.swift] Image named 'settings' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(suggestionsViewController != nil, "[R.swift] ViewController with identifier 'suggestionsViewController' could not be loaded from storyboard 'Main' as 'Dubbidson.SuggestionsViewController'.")
      }
    }
  }
}

struct _R {
  struct nib {
    struct _LaunchScreen: NibResource {
      var instance: UINib { return UINib.init(nibName: "LaunchScreen", bundle: nil) }
      var name: String { return "LaunchScreen" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: nil)
  }
}